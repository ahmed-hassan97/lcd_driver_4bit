
driver_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000336  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000336  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000637  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000271  00000000  00000000  00000a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003de  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d8  00000000  00000000  000010d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e0  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000025a  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000015ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "macro.h"
#include "LCD_DRIVER.h"

int main(void)
{
	lcd_init();
  82:	0e 94 98 00 	call	0x130	; 0x130 <lcd_init>
    lcd_write_string("ahmed hassan");
  86:	80 e6       	ldi	r24, 0x60	; 96
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_write_string>
	lcd_set_cursor(2,1);
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lcd_set_cursor>
	lcd_write_num(10000);
  96:	60 e1       	ldi	r22, 0x10	; 16
  98:	77 e2       	ldi	r23, 0x27	; 39
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_write_num>
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x20>

000000a4 <lcd_write_command>:
 
	
}
void lcd_write_command(uint8_t cmd){
	
	RS(0);           //write command
  a4:	df 98       	cbi	0x1b, 7	; 27
	D7(READBIT(cmd,7));
  a6:	88 23       	and	r24, r24
  a8:	14 f4       	brge	.+4      	; 0xae <lcd_write_command+0xa>
  aa:	af 9a       	sbi	0x15, 7	; 21
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <lcd_write_command+0xc>
  ae:	af 98       	cbi	0x15, 7	; 21
	D6(READBIT(cmd,6));
  b0:	86 ff       	sbrs	r24, 6
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <lcd_write_command+0x14>
  b4:	ae 9a       	sbi	0x15, 6	; 21
  b6:	01 c0       	rjmp	.+2      	; 0xba <lcd_write_command+0x16>
  b8:	ae 98       	cbi	0x15, 6	; 21
	D5(READBIT(cmd,5));
  ba:	85 ff       	sbrs	r24, 5
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <lcd_write_command+0x1e>
  be:	ad 9a       	sbi	0x15, 5	; 21
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <lcd_write_command+0x20>
  c2:	ad 98       	cbi	0x15, 5	; 21
	D4(READBIT(cmd,4));
  c4:	84 ff       	sbrs	r24, 4
  c6:	02 c0       	rjmp	.+4      	; 0xcc <lcd_write_command+0x28>
  c8:	ac 9a       	sbi	0x15, 4	; 21
  ca:	01 c0       	rjmp	.+2      	; 0xce <lcd_write_command+0x2a>
  cc:	ac 98       	cbi	0x15, 4	; 21
	TRIGGER;
  ce:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	e9 ef       	ldi	r30, 0xF9	; 249
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_write_command+0x30>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_write_command+0x36>
  da:	00 00       	nop
  dc:	ab 98       	cbi	0x15, 3	; 21
  de:	e9 ef       	ldi	r30, 0xF9	; 249
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_write_command+0x3e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_write_command+0x44>
  e8:	00 00       	nop
	D7(READBIT(cmd,3));
  ea:	83 ff       	sbrs	r24, 3
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <lcd_write_command+0x4e>
  ee:	af 9a       	sbi	0x15, 7	; 21
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <lcd_write_command+0x50>
  f2:	af 98       	cbi	0x15, 7	; 21
	D6(READBIT(cmd,2));
  f4:	82 ff       	sbrs	r24, 2
  f6:	02 c0       	rjmp	.+4      	; 0xfc <lcd_write_command+0x58>
  f8:	ae 9a       	sbi	0x15, 6	; 21
  fa:	01 c0       	rjmp	.+2      	; 0xfe <lcd_write_command+0x5a>
  fc:	ae 98       	cbi	0x15, 6	; 21
	D5(READBIT(cmd,1));
  fe:	81 ff       	sbrs	r24, 1
 100:	02 c0       	rjmp	.+4      	; 0x106 <lcd_write_command+0x62>
 102:	ad 9a       	sbi	0x15, 5	; 21
 104:	01 c0       	rjmp	.+2      	; 0x108 <lcd_write_command+0x64>
 106:	ad 98       	cbi	0x15, 5	; 21
	D4(READBIT(cmd,0));
 108:	80 ff       	sbrs	r24, 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <lcd_write_command+0x6c>
 10c:	ac 9a       	sbi	0x15, 4	; 21
 10e:	01 c0       	rjmp	.+2      	; 0x112 <lcd_write_command+0x6e>
 110:	ac 98       	cbi	0x15, 4	; 21
	TRIGGER;
 112:	ab 9a       	sbi	0x15, 3	; 21
 114:	89 ef       	ldi	r24, 0xF9	; 249
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_write_command+0x74>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_write_command+0x7a>
 11e:	00 00       	nop
 120:	ab 98       	cbi	0x15, 3	; 21
 122:	e9 ef       	ldi	r30, 0xF9	; 249
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_write_command+0x82>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_write_command+0x88>
 12c:	00 00       	nop
 12e:	08 95       	ret

00000130 <lcd_init>:
 */ 
#include "macro.h"
#include "LCD_DRIVER.h"

void lcd_init(){
init_port;
 130:	84 b3       	in	r24, 0x14	; 20
 132:	88 6f       	ori	r24, 0xF8	; 248
 134:	84 bb       	out	0x14, r24	; 20
 136:	d7 9a       	sbi	0x1a, 7	; 26
 138:	81 ee       	ldi	r24, 0xE1	; 225
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_init+0xc>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_init+0x12>
 142:	00 00       	nop
_delay_ms(5);
lcd_write_command(0x2);             //four bit mode
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write_command>
lcd_write_command(0x28);            //four bit mode
 14a:	88 e2       	ldi	r24, 0x28	; 40
 14c:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write_command>
lcd_write_command(CLEAR);          //clear lcd
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write_command>
lcd_write_command(0xc);           //increment cursor
 156:	8c e0       	ldi	r24, 0x0C	; 12
 158:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write_command>
lcd_write_command(LINE_ONE);    //start first one
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write_command>
 162:	87 e8       	ldi	r24, 0x87	; 135
 164:	93 e1       	ldi	r25, 0x13	; 19
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_init+0x36>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_init+0x3c>
 16c:	00 00       	nop
 16e:	08 95       	ret

00000170 <lcd_write_char>:
	
	
	
}
void lcd_write_char(uint8_t data){
RS(1);           //write command
 170:	df 9a       	sbi	0x1b, 7	; 27
D7(READBIT(data,7));
 172:	88 23       	and	r24, r24
 174:	14 f4       	brge	.+4      	; 0x17a <lcd_write_char+0xa>
 176:	af 9a       	sbi	0x15, 7	; 21
 178:	01 c0       	rjmp	.+2      	; 0x17c <lcd_write_char+0xc>
 17a:	af 98       	cbi	0x15, 7	; 21
D6(READBIT(data,6));
 17c:	86 ff       	sbrs	r24, 6
 17e:	02 c0       	rjmp	.+4      	; 0x184 <lcd_write_char+0x14>
 180:	ae 9a       	sbi	0x15, 6	; 21
 182:	01 c0       	rjmp	.+2      	; 0x186 <lcd_write_char+0x16>
 184:	ae 98       	cbi	0x15, 6	; 21
D5(READBIT(data,5));
 186:	85 ff       	sbrs	r24, 5
 188:	02 c0       	rjmp	.+4      	; 0x18e <lcd_write_char+0x1e>
 18a:	ad 9a       	sbi	0x15, 5	; 21
 18c:	01 c0       	rjmp	.+2      	; 0x190 <lcd_write_char+0x20>
 18e:	ad 98       	cbi	0x15, 5	; 21
D4(READBIT(data,4));
 190:	84 ff       	sbrs	r24, 4
 192:	02 c0       	rjmp	.+4      	; 0x198 <lcd_write_char+0x28>
 194:	ac 9a       	sbi	0x15, 4	; 21
 196:	01 c0       	rjmp	.+2      	; 0x19a <lcd_write_char+0x2a>
 198:	ac 98       	cbi	0x15, 4	; 21
TRIGGER;
 19a:	ab 9a       	sbi	0x15, 3	; 21
 19c:	e9 ef       	ldi	r30, 0xF9	; 249
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_write_char+0x30>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_write_char+0x36>
 1a6:	00 00       	nop
 1a8:	ab 98       	cbi	0x15, 3	; 21
 1aa:	e9 ef       	ldi	r30, 0xF9	; 249
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_write_char+0x3e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_write_char+0x44>
 1b4:	00 00       	nop
D7(READBIT(data,3));
 1b6:	83 ff       	sbrs	r24, 3
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <lcd_write_char+0x4e>
 1ba:	af 9a       	sbi	0x15, 7	; 21
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <lcd_write_char+0x50>
 1be:	af 98       	cbi	0x15, 7	; 21
D6(READBIT(data,2));
 1c0:	82 ff       	sbrs	r24, 2
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <lcd_write_char+0x58>
 1c4:	ae 9a       	sbi	0x15, 6	; 21
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <lcd_write_char+0x5a>
 1c8:	ae 98       	cbi	0x15, 6	; 21
D5(READBIT(data,1));
 1ca:	81 ff       	sbrs	r24, 1
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <lcd_write_char+0x62>
 1ce:	ad 9a       	sbi	0x15, 5	; 21
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <lcd_write_char+0x64>
 1d2:	ad 98       	cbi	0x15, 5	; 21
D4(READBIT(data,0));
 1d4:	80 ff       	sbrs	r24, 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <lcd_write_char+0x6c>
 1d8:	ac 9a       	sbi	0x15, 4	; 21
 1da:	01 c0       	rjmp	.+2      	; 0x1de <lcd_write_char+0x6e>
 1dc:	ac 98       	cbi	0x15, 4	; 21
TRIGGER;
 1de:	ab 9a       	sbi	0x15, 3	; 21
 1e0:	89 ef       	ldi	r24, 0xF9	; 249
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_write_char+0x74>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_write_char+0x7a>
 1ea:	00 00       	nop
 1ec:	ab 98       	cbi	0x15, 3	; 21
 1ee:	e9 ef       	ldi	r30, 0xF9	; 249
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_write_char+0x82>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lcd_write_char+0x88>
 1f8:	00 00       	nop
 1fa:	08 95       	ret

000001fc <lcd_write_string>:
	
	
}
void lcd_write_string(uint8_t *str){
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
	while(*str!='\0'){
 202:	88 81       	ld	r24, Y
 204:	88 23       	and	r24, r24
 206:	31 f0       	breq	.+12     	; 0x214 <lcd_write_string+0x18>
 208:	21 96       	adiw	r28, 0x01	; 1
	lcd_write_char(*str);
 20a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_write_char>
TRIGGER;
	
	
}
void lcd_write_string(uint8_t *str){
	while(*str!='\0'){
 20e:	89 91       	ld	r24, Y+
 210:	81 11       	cpse	r24, r1
 212:	fb cf       	rjmp	.-10     	; 0x20a <lcd_write_string+0xe>
	lcd_write_char(*str);
	str++;	
		
	}
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <lcd_write_num>:
void lcd_write_num(uint32_t num){
 21a:	bf 92       	push	r11
 21c:	cf 92       	push	r12
 21e:	df 92       	push	r13
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	2a 97       	sbiw	r28, 0x0a	; 10
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
	uint8_t y[10];
	int8_t i;
	
	for(i=0;num!=0;i++){
 23c:	61 15       	cp	r22, r1
 23e:	71 05       	cpc	r23, r1
 240:	81 05       	cpc	r24, r1
 242:	91 05       	cpc	r25, r1
 244:	a9 f1       	breq	.+106    	; 0x2b0 <lcd_write_num+0x96>
 246:	b1 2c       	mov	r11, r1
		
	y[i]=(num%10)+48;
 248:	0f 2e       	mov	r0, r31
 24a:	fa e0       	ldi	r31, 0x0A	; 10
 24c:	cf 2e       	mov	r12, r31
 24e:	d1 2c       	mov	r13, r1
 250:	e1 2c       	mov	r14, r1
 252:	f1 2c       	mov	r15, r1
 254:	f0 2d       	mov	r31, r0
 256:	01 e0       	ldi	r16, 0x01	; 1
 258:	10 e0       	ldi	r17, 0x00	; 0
 25a:	0c 0f       	add	r16, r28
 25c:	1d 1f       	adc	r17, r29
 25e:	0b 0d       	add	r16, r11
 260:	11 1d       	adc	r17, r1
 262:	b7 fc       	sbrc	r11, 7
 264:	1a 95       	dec	r17
 266:	a7 01       	movw	r20, r14
 268:	96 01       	movw	r18, r12
 26a:	0e 94 77 01 	call	0x2ee	; 0x2ee <__udivmodsi4>
 26e:	60 5d       	subi	r22, 0xD0	; 208
 270:	f8 01       	movw	r30, r16
 272:	60 83       	st	Z, r22
	num=(num/10);
 274:	62 2f       	mov	r22, r18
 276:	73 2f       	mov	r23, r19
 278:	84 2f       	mov	r24, r20
 27a:	95 2f       	mov	r25, r21
}
void lcd_write_num(uint32_t num){
	uint8_t y[10];
	int8_t i;
	
	for(i=0;num!=0;i++){
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	2b 0d       	add	r18, r11
 280:	61 15       	cp	r22, r1
 282:	71 05       	cpc	r23, r1
 284:	81 05       	cpc	r24, r1
 286:	91 05       	cpc	r25, r1
 288:	11 f0       	breq	.+4      	; 0x28e <lcd_write_num+0x74>
 28a:	b2 2e       	mov	r11, r18
 28c:	e4 cf       	rjmp	.-56     	; 0x256 <lcd_write_num+0x3c>
		
	y[i]=(num%10)+48;
	num=(num/10);
	}
	for(i--;i>=0;--i){
 28e:	bb 20       	and	r11, r11
 290:	7c f0       	brlt	.+30     	; 0x2b0 <lcd_write_num+0x96>
		lcd_write_char(y[i]);
 292:	e1 e0       	ldi	r30, 0x01	; 1
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	ec 0f       	add	r30, r28
 298:	fd 1f       	adc	r31, r29
 29a:	eb 0d       	add	r30, r11
 29c:	f1 1d       	adc	r31, r1
 29e:	b7 fc       	sbrc	r11, 7
 2a0:	fa 95       	dec	r31
 2a2:	80 81       	ld	r24, Z
 2a4:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_write_char>
	for(i=0;num!=0;i++){
		
	y[i]=(num%10)+48;
	num=(num/10);
	}
	for(i--;i>=0;--i){
 2a8:	ba 94       	dec	r11
 2aa:	ff ef       	ldi	r31, 0xFF	; 255
 2ac:	bf 12       	cpse	r11, r31
 2ae:	f1 cf       	rjmp	.-30     	; 0x292 <lcd_write_num+0x78>
		lcd_write_char(y[i]);
	}
	
}
 2b0:	2a 96       	adiw	r28, 0x0a	; 10
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	df 90       	pop	r13
 2ca:	cf 90       	pop	r12
 2cc:	bf 90       	pop	r11
 2ce:	08 95       	ret

000002d0 <lcd_set_cursor>:
void lcd_set_cursor(uint8_t row,uint8_t column){
	row -=1;
	column-=1;
	
	lcd_write_command(0x80+(row*0x40)+column);
 2d0:	90 e4       	ldi	r25, 0x40	; 64
 2d2:	89 9f       	mul	r24, r25
 2d4:	60 0d       	add	r22, r0
 2d6:	11 24       	eor	r1, r1
 2d8:	86 2f       	mov	r24, r22
 2da:	81 5c       	subi	r24, 0xC1	; 193
 2dc:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write_command>
 2e0:	83 ef       	ldi	r24, 0xF3	; 243
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <lcd_set_cursor+0x14>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <lcd_set_cursor+0x1a>
 2ea:	00 00       	nop
 2ec:	08 95       	ret

000002ee <__udivmodsi4>:
 2ee:	a1 e2       	ldi	r26, 0x21	; 33
 2f0:	1a 2e       	mov	r1, r26
 2f2:	aa 1b       	sub	r26, r26
 2f4:	bb 1b       	sub	r27, r27
 2f6:	fd 01       	movw	r30, r26
 2f8:	0d c0       	rjmp	.+26     	; 0x314 <__udivmodsi4_ep>

000002fa <__udivmodsi4_loop>:
 2fa:	aa 1f       	adc	r26, r26
 2fc:	bb 1f       	adc	r27, r27
 2fe:	ee 1f       	adc	r30, r30
 300:	ff 1f       	adc	r31, r31
 302:	a2 17       	cp	r26, r18
 304:	b3 07       	cpc	r27, r19
 306:	e4 07       	cpc	r30, r20
 308:	f5 07       	cpc	r31, r21
 30a:	20 f0       	brcs	.+8      	; 0x314 <__udivmodsi4_ep>
 30c:	a2 1b       	sub	r26, r18
 30e:	b3 0b       	sbc	r27, r19
 310:	e4 0b       	sbc	r30, r20
 312:	f5 0b       	sbc	r31, r21

00000314 <__udivmodsi4_ep>:
 314:	66 1f       	adc	r22, r22
 316:	77 1f       	adc	r23, r23
 318:	88 1f       	adc	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	1a 94       	dec	r1
 31e:	69 f7       	brne	.-38     	; 0x2fa <__udivmodsi4_loop>
 320:	60 95       	com	r22
 322:	70 95       	com	r23
 324:	80 95       	com	r24
 326:	90 95       	com	r25
 328:	9b 01       	movw	r18, r22
 32a:	ac 01       	movw	r20, r24
 32c:	bd 01       	movw	r22, r26
 32e:	cf 01       	movw	r24, r30
 330:	08 95       	ret

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
